# bus_tracking/models.py

from django.db import models

class Location(models.Model):
    """
    Represents geographic coordinates (latitude and longitude).
    """
    latitude = models.FloatField()
    longitude = models.FloatField()

    def __str__(self):
        return f"({self.latitude}, {self.longitude})"

class BusLine(models.Model):
    """
    Represents bus routes.
    """
    # FIX: Removed the duplicate bus_line_id. A model can only have one primary key.
    route_id = models.AutoField(primary_key=True)
    route_name = models.CharField(max_length=255)
    route_description = models.TextField(blank=True)
    estimated_travel_time = models.DurationField(null=True, blank=True)
    
    def __str__(self):
        return self.route_name

class BusStop(models.Model):
    """
    Represents bus stops.
    """
    stop_id = models.AutoField(primary_key=True)
    stop_name = models.CharField(max_length=255)
    location = models.ForeignKey(Location, on_delete=models.CASCADE)

    def __str__(self):
        return self.stop_name
    
class BusLineStop(models.Model):
    """
    Intermediate model to link bus lines to stops with a specific order.
    """
    bus_line = models.ForeignKey(BusLine, on_delete=models.CASCADE)
    bus_stop = models.ForeignKey(BusStop, on_delete=models.CASCADE)
    order = models.PositiveIntegerField()

    class Meta:
        ordering = ['order']
        unique_together = ('bus_line', 'bus_stop', 'order')

    def __str__(self):
        return f"{self.bus_line.route_name} - {self.bus_stop.stop_name} ({self.order})"

class Bus(models.Model):
    """
    Represents individual buses in the system.
    """
    bus_id = models.AutoField(primary_key=True)
    license_plate = models.CharField(max_length=50, unique=True)
    qr_code_value = models.CharField(max_length=255, unique=True, blank=True, null=True)
    bus_line = models.ForeignKey(BusLine, on_delete=models.SET_NULL, null=True, blank=True)
    
    # Field to store the last known location for quick access
    current_location = models.ForeignKey(Location, on_delete=models.SET_NULL, null=True, blank=True, related_name='bus_current_location')

    def __str__(self):
        return f"Bus {self.license_plate}"

class BusLocationLog(models.Model):
    """
    Represents a historical log of bus locations.
    """
    bus = models.ForeignKey(Bus, on_delete=models.CASCADE)
    location = models.ForeignKey(Location, on_delete=models.CASCADE)
    timestamp = models.DateTimeField(auto_now_add=True)
    speed = models.FloatField(null=True, blank=True)

    def __str__(self):
        return f"Log for Bus {self.bus} at {self.timestamp}"

class Alert(models.Model):
    """
    Represents alerts generated by the system.
    """
    ALERT_TYPES = (
        ('DELAY', 'Delay'),
        ('OFF_ROUTE', 'Off Route'),
        ('TECHNICAL', 'Technical Issue'),
        ('OTHER', 'Other'),
    )
    alert_id = models.AutoField(primary_key=True)
    bus = models.ForeignKey(Bus, on_delete=models.SET_NULL, null=True, blank=True)
    alert_type = models.CharField(max_length=20, choices=ALERT_TYPES, default='OTHER')
    message = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    is_resolved = models.BooleanField(default=False)

    def __str__(self):
        return f"Alert for Bus {self.bus}: {self.message}"